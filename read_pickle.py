import pickle, os


filename = 'ta_agem_metrics_20250701_154544.pkl'

with open(os.path.join("test_results", filename), 'rb') as file:
    data = pickle.load(file)
    # See what the loaded data looks like without printing the entire structure
    if isinstance(data, dict):
        print(f"Loaded data contains {len(data)} keys:")
        for key in data.keys():
            print(f" - {key}: {type(data[key])}")
    elif isinstance(data, list):
        print(f"Loaded data is a list with {len(data)} items.")
        if len(data) > 0:
            print(f" - First item type: {type(data[0])}")
    else:
        print(f"Loaded data is of type {type(data)} with length {len(data) if hasattr(data, '__len__') else 'N/A'}")

# Loaded data contains 9 keys:
#  - task_accuracies: <class 'list'>
#  - per_task_accuracies: <class 'list'>
#  - task_losses: <class 'list'>
#  - memory_sizes: <class 'list'>
#  - epoch_losses: <class 'list'>
#  - batch_losses: <class 'list'>
#  - training_times: <class 'list'>
#  - memory_efficiency: <class 'list'>
#  - timestamp: <class 'str'>

# Print the first few entries of each key to inspect the data
for key in data.keys():
    if isinstance(data[key], list):
        print(f"{key}: {data[key][:5]}")  # Print first 5 items for lists
    else:
        print(f"{key}: {data[key]}")  # Print the value directly for non-list types

# TODO: Plot the data
# Here's whats there
# Loaded data contains 9 keys:
#  - task_accuracies: <class 'list'>
#  - per_task_accuracies: <class 'list'>
#  - task_losses: <class 'list'>
#  - memory_sizes: <class 'list'>
#  - epoch_losses: <class 'list'>
#  - batch_losses: <class 'list'>
#  - training_times: <class 'list'>
#  - memory_efficiency: <class 'list'>
#  - timestamp: <class 'str'>
# task_accuracies: [0.9594333333333334, 0.9546833333333333, 0.9502888888888888, 0.9450708333333333, 0.9070866666666667]
# per_task_accuracies: [[0.9594333333333334], [0.9347, 0.9746666666666667], [0.9268666666666666, 0.9435166666666667, 0.9804833333333334], [0.9209166666666667, 0.9198833333333334, 0.9555, 0.9839833333333333], [0.9032, 0.8334166666666667, 0.8781, 0.9346833333333333, 0.9860333333333333]]
# task_losses: []
# memory_sizes: [300, 300, 300, 300, 300]
# epoch_losses: [[2.0180822248955566, 0.8029772452364365, 0.4473678542605291, 0.36697515671979636, 0.32977847607030225, 0.3046029427026709, 0.28490991294461615, 0.2686583392311974, 0.25382520612771625, 0.2401979106964233, 0.22756280648584168, 0.21587102710541028, 0.2046417263180483, 0.19436636115816266, 0.18492470623898163, 0.17597805076796794, 0.16816842238907703, 0.1605539666544646, 0.15367626194046655, 0.1471087557153854], [0.5414902678420768, 0.30120141042303294, 0.2544803082526972, 0.22620040408933226, 0.20548833864791474, 0.1893829851942525, 0.1758738736019004, 0.1645858362170402, 0.15486780721162602, 0.1463226967815232, 0.13856423099238116, 0.13178723096195608, 0.1257574971980066, 0.1203883143888476, 0.11537995131581556, 0.11050419865457418, 0.10652552801845984, 0.10229626965200683, 0.0987387756666576, 0.09520016171818134], [0.4540941879283637, 0.2512633609777937, 0.20834854503635628, 0.18301143488610008, 0.16517202304082457, 0.15119030676968395, 0.1399812837005399, 0.130712757900008, 0.1231312629658108, 0.11606739094855341, 0.11030774421665895, 0.10484898558687807, 0.10009397633267024, 0.09547206677408152, 0.09176630996819586, 0.08805107915656603, 0.08448509925194472, 0.08139834504655058, 0.07847163966131726, 0.07567049010526292], [0.41401334783722027, 0.2215343707022257, 0.18186534664690648, 0.15839615666780932, 0.1422197986469449, 0.13004636874926898, 0.12032786464349678, 0.11245359925029334, 0.10586371172593984, 0.09987365050616791, 0.09456998741798452, 0.08995312275502754, 0.08569304468423555, 0.08181631202960853, 0.07834924673042648, 0.07514143973880952, 0.07203544019345039, 0.06939931127404755, 0.06679095199821555, 0.06428769577164106], [0.387754821513469, 0.20646680713330473, 0.16732244411289382, 0.1445313779882854, 0.12908334166370333, 0.11749606502095897, 0.10804519921317114, 0.10069201538964989, 0.094081854217938, 0.0888413180408194, 0.08398631283652504, 0.0798929918663974, 0.07567491156457981, 0.07252925403696038, 0.06881062635393755, 0.0661675880897116, 0.06328535220943256, 0.0607973341911226, 0.05833326694372226, 0.05625830742286901]]
# batch_losses: [{'task': 0, 'epoch': 0, 'batch': 0, 'loss': 2.3284037113189697}, {'task': 0, 'epoch': 0, 'batch': 1, 'loss': 2.2965750694274902}, {'task': 0, 'epoch': 0, 'batch': 2, 'loss': 2.332415819168091}, {'task': 0, 'epoch': 0, 'batch': 3, 'loss': 2.325805187225342}, {'task': 0, 'epoch': 0, 'batch': 4, 'loss': 2.2886767387390137}]
# training_times: [664.2958102226257, 707.9371378421783, 710.0332610607147, 713.1663269996643, 949.6074056625366]
# memory_efficiency: [0.003198111111111111, 0.003182277777777778, 0.0031676296296296296, 0.003150236111111111, 0.0030236222222222225]
# timestamp: 2025-07-01T15:45:44.660534